<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mar_collision</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
action="move";
animation="";
range=400;
wounded=0;

depth=(y*-1)/2;


ii=0;blind_fire=0;

target=0;
target_re=240+floor(random(30))+1;

scr_colors_initialize();

main_color=8;
secondary_color=6;
pauldron_color=6;
lens_color=7;
trim_color=15;
pauldron2_color=6;
weapon_color=6;
col_special=0;
trim=1;firing=0;

marines_alive=10;
marines_max=10;

var i;i=-1;
repeat(21){i+=1;
    marine[i]=1;
    if (i&gt;10) then marine[i]=0;
    
    marine_co[i]=2;marine_id[i]=0;
    marine_role[i]="Tactical";
    marine_name[i]=scr_marine_name();
    
    marine_hp[i]=100;
    marine_maxhp[i]=100;
    marine_ac[i]=20;
    marine_exp[i]=50;
    
    marine_armor[i]="";
    marine_gear[i]="";
    marine_mobi[i]="";
    
    marine_wep1[i]="";
    marine_wep1_ammo[i]=0;
    marine_wep1_reload[i]=0;
    marine_wep1_reload_time[i]=60;
    marine_wep1_spec[i]=0;// For underslung or combi weapons
    marine_wep1_firerate[i]=30;// If = tough opponents then set to like 10 instead
    marine_wep1_cooldown[i]=0;
    marine_wep1_owner[i]=i;
    
    
    /*marine_wep2[i]="";
    marine_wep2_ammo[i]=0;
    marine_wep2_reload[i]=0;
    marine_wep2_spec[i]=0;*/
    marine_cqc[i]=0;
    
    marine_ranged[i]=1;
    marine_melee[i]=1;
}


// Bolter Ammo: 50
// Bolter Reload: 10
// once reload = 0 then it sets reload to negative something; each step is +=1, once it gets to -1 then ammo-=10 and reload=10

i=-1;repeat(41){i+=1;
    weapon_group[i]="";
    weapon_num[i]=0;
    weapon_cool[i]=0;
    weapon_range[i]=0;
}

i=0;repeat(10){i+=1;
    marine_armor[i]="Power Armor";
    
    marine_wep1[i]=string(obj_img.gyro);
    marine_wep1_ammo[i]=40;
    marine_wep1_clip[i]=10;
    marine_wep1_clip_size[i]=10;
    marine_wep1_reload[i]=0;
    marine_wep1_reload_time[i]=60;
    marine_wep1_spec[i]=0;
    marine_wep1_firerate[i]=30;
    marine_wep1_range[i]=400;
    
    if (i&gt;=8){
    // if (i&gt;=1){
        marine_wep1[i]="Flamer";
        marine_wep1_ammo[i]=0;
        marine_wep1_clip[i]=6;
        marine_wep1_clip_size[i]=6;
        marine_wep1_reload[i]=0;
        marine_wep1_reload_time[i]=999;
        marine_wep1_spec[i]=0;
        marine_wep1_firerate[i]=50;
        marine_wep1_range[i]=200;
    }
    
    /*marine_wep2[i]=string(obj_img.blade)+"sword";
    marine_wep2_ammo[i]=0;
    marine_wep2_reload[i]=999;*/
}


var i,n,g;
i=0;n=0;g=0;
repeat(10){
    i+=1;n=0;g=0;
    repeat(10){
        if (g=0){n+=1;
            if (weapon_group[n]=marine_wep1[i]) and (marine_wep1[i]!="") and (weapon_cool[n]=marine_wep1_firerate[i]){
                g=n;weapon_num[n]+=1;
            }
        }
    }
    n=0;
    repeat(10){
        if (g=0){n+=1;
            if (weapon_group[n]=""){
                g=n;weapon_group[n]=marine_wep1[i];
                weapon_cool[n]=marine_wep1_firerate[i];
                weapon_range[n]=marine_wep1_range[i];
                weapon_num[n]=1;
            }
        }
    }
}


// show_message(string(weapon_num[2])+"x "+string(weapon_group[2])+", range:"+string(weapon_range[2]));


scr_shader_initialize();



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (instance_number(obj_ork)&gt;30) then blind_fire=1;
else blind_fire=0;




if (blind_fire=0){
    if (!instance_exists(target)) or (target=0){target=0;
        if (instance_exists(obj_ork)){
            target=instance_nearest(x,y,obj_ork);
            target_re=240+floor(random(30))+1;
        }
    }
    var trange;trange=9999;
    if (instance_exists(target)){
        trange=point_distance(x,y,target.x,target.y);
    
        target_re-=1;
        if (target_re=0){
            target=instance_nearest(x,y,obj_ork);
            target_re=240+floor(random(30))+1;
        }
        
        if (point_distance(x,y,target.x,target.y)&gt;range){
            if (action="") or ((action="move") and (animation="")){action="move";animation="move";ii=choose(1,2,3);}
        }
        if (point_distance(x,y,target.x,target.y)&lt;=range){
            if (action="move"){
                action="";animation="settle";ii=0;
            }
            if (action="") and (animation="settle") and (ii=2){
                action="fire";animation="";ii=0;
            }
        }
    }
}

if (blind_fire=1){
    // obj_enemy_leftest
    
    var trange;trange=9999;
    if (instance_exists(obj_enemy_leftest)){
        trange=point_distance(x,0,obj_enemy_leftest.x,0);
        
        if (point_distance(x,0,obj_enemy_leftest.x,0)&gt;range){
            if (action="") or ((action="move") and (animation="")){action="move";animation="move";ii=choose(1,2,3);}
        }
        if (point_distance(x,0,obj_enemy_leftest.x,0)&lt;=range){
            if (action="move"){
                action="";animation="settle";ii=0;
            }
            if (action="") and (animation="settle") and (ii=2) and (collision_line(x,y,x+1000,y,obj_ork,0,1)){
                action="fire";animation="";ii=0;
            }
        }
    }
}




if (action="") then speed=0;

if (animation="settle") then ii+=1;

if (action="move"){
    animation="walk";speed=2;ii+=1;
}
if (action="fire"){

    // Decide which weapon to use
    
    var i,m;
    
    i=0;
    repeat(10){i+=1;
        if (marine_wep1_cooldown[i]&gt;0) then marine_wep1_cooldown[i]-=1;
        
        if (marine_wep1_reload[i]&gt;0){
            marine_wep1_reload[i]-=1;
            
            if (marine_wep1_reload[i]=1){
                var relo;relo=min(marine_wep1_ammo[i],marine_wep1_clip_size[i]);
                marine_wep1_ammo[i]-=relo;
                marine_wep1_clip[i]+=relo;
                marine_wep1_reload[i]=0;
            }
        }
    }
    
    i=0;m=0;
    repeat(20){
        i+=1;m=0;
        
        
        
        if (weapon_group[i]!="") and (weapon_range[i]&gt;=trange) and ((instance_exists(target)) or ((blind_fire=1) and (weapon_range[i]&gt;=trange))){
            var bull;bull=0;
            
            repeat(10){m+=1;
                if (marine[marine_wep1_owner[m]]=1) and (marine_wep1[m]=weapon_group[i]) and (marine_wep1_clip[m]&gt;0){
                    if (marine_wep1_reload[m]&lt;=0) and (marine_wep1_cooldown[m]&lt;=0) and (marine_wep1_range[m]&gt;50){
                    
                        if (blind_fire=0) or ((blind_fire=1) and (collision_line(x,y,x+marine_wep1_range[m],y,obj_ork,0,1))){
                        
                            if ((!instance_exists(bull)) or (bull=0)) then bull=instance_create(x+23,y-24,obj_p1_bullet);
                            bull.image_speed=0;
                            
                            if (instance_exists(target)) or (blind_fire=1){// Appearance
                                bull.projectile_infos+=1;
                                if (marine_wep1[m]=string(obj_img.gyro)){bull.sprite_index=spr_bolt;bull.image_index=0;bull.speed=40;
                                    if (blind_fire=0){bull.direction=point_direction(bull.x,bull.y,target.x,target.y)+floor(random_range(-4,4))+1;}
                                    if (blind_fire=1){bull.direction=self.direction+floor(random_range(-8,8))+1;}
                                    bull.projectile_damage[bull.projectile_infos]=30;
                                    bull.projectile_arp[bull.projectile_infos]=0;
                                }
                                if (marine_wep1[m]="Flamer"){bull.sprite_index=spr_flame2;bull.image_index=0;bull.speed=0;bull.image_speed=1;
                                    if (blind_fire=0){bull.direction=point_direction(bull.x,bull.y,target.x,target.y)+floor(random_range(-4,4))+1;}
                                    if (blind_fire=1){bull.direction=self.direction+floor(random_range(-8,8))+1;}
                                    bull.projectile_damage[bull.projectile_infos]=160;
                                    bull.projectile_arp[bull.projectile_infos]=-1;
                                }
                            }
                            
                            bull.projectile_range[bull.projectile_infos]=450;
                            if (marine_wep1_clip[m]&lt;900) then marine_wep1_clip[m]-=1;
                            if (marine_wep1_clip[m]=0) and (marine_wep1_ammo[m]&gt;0) and (marine_wep1_reload[m]&lt;=0) then marine_wep1_reload[m]=marine_wep1_reload_time[m]+1;
                            
                            marine_wep1_cooldown[m]=marine_wep1_firerate[m];
                            firing=1;
                        
                        
                        }
                    }
                }
                
            }
                
        }
    }
    
    
    /*
    weapon_group[i]="";
    weapon_num[i]=0;
    weapon_cool[i]=0;
    weapon_range[i]=0;
    
    marine_wep1_ammo[i]=50;
    marine_wep1_clip[i]=10;
    marine_wep1_reload[i]=0;
    marine_wep1_reload_time[i]=60;
    
    
    
    projectile_infos=0;
    projectile_damage[i]=0;
    projectile_arp[i]=0;
    projectile_splash[i]=0;
    projectile_range[i]=0;
    
    */
    
    
    speed=0;
    
    if (firing=1) and (ii&lt;=3){
        animation="fire";
        ii+=1;image_speed=0;
    }
    
    if (firing=1) and (ii&gt;3){
        firing=0;ii=0;image_speed=0;
    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// if (wounded&gt;0) then d3d_set_fog(true,16645629,0,0);
if (wounded&gt;0) then d3d_set_fog(true,255,0,0);
if (wounded&lt;=0){
    if(shader_is_compiled(sReplaceColor)){
        shader_set(sReplaceColor);
        shader_set_uniform_f(colour_to_find1, sourceR1,sourceG1,sourceB1 );       
        shader_set_uniform_f(colour_to_set1, targetR1,targetG1,targetB1 );
        shader_set_uniform_f(colour_to_find2, sourceR2,sourceG2,sourceB2 );       
        shader_set_uniform_f(colour_to_set2, targetR2,targetG2,targetB2 );
        shader_set_uniform_f(colour_to_find3, sourceR3,sourceG3,sourceB3 );       
        shader_set_uniform_f(colour_to_set3, targetR3,targetG3,targetB3 );
        shader_set_uniform_f(colour_to_find4, sourceR4,sourceG4,sourceB4 );       
        shader_set_uniform_f(colour_to_set4, targetR4,targetG4,targetB4 );
        shader_set_uniform_f(colour_to_find5, sourceR5,sourceG5,sourceB5 );
        shader_set_uniform_f(colour_to_set5, targetR5,targetG5,targetB5 );
        shader_set_uniform_f(colour_to_find6, sourceR6,sourceG6,sourceB6 );
        shader_set_uniform_f(colour_to_set6, targetR6,targetG6,targetB6 );
        shader_set_uniform_f(colour_to_find7, sourceR7,sourceG7,sourceB7 );
        shader_set_uniform_f(colour_to_set7, targetR7,targetG7,targetB7 );
    }
}

if (animation="") or (animation="settle"){
    if (col_special=0){
        draw_sprite(spr_mar_walk_legs1,0,x,y);
        draw_sprite(spr_mar_walk_body1,0,x,y);
    }
    if (col_special=1){
        draw_sprite(spr_mar_walk_legs1,0,x,y);
        draw_sprite(spr_mar_walk_body2,0,x,y);
    }
    if (col_special=2){
        draw_sprite(spr_mar_walk_legs3,0,x,y);
        draw_sprite(spr_mar_walk_body3,0,x,y);
    }
    if (col_special=3){
        draw_sprite(spr_mar_walk_legs4,0,x,y);
        draw_sprite(spr_mar_walk_body3,0,x,y);
    }
    if (trim=0) then draw_sprite(spr_mar_walk_pauldron1,0,x,y);
    if (trim=1) then draw_sprite(spr_mar_walk_pauldron2,0,x,y);
}
if (animation="walk"){
    if (col_special=0){
        draw_sprite(spr_mar_walk_legs1,ii,x,y);
        draw_sprite(spr_mar_walk_body1,ii,x,y);
    }
    if (col_special=1){
        draw_sprite(spr_mar_walk_legs1,ii,x,y);
        draw_sprite(spr_mar_walk_body2,ii,x,y);
    }
    if (col_special=2){
        draw_sprite(spr_mar_walk_legs3,ii,x,y);
        draw_sprite(spr_mar_walk_body3,ii,x,y);
    }
    if (col_special=3){
        draw_sprite(spr_mar_walk_legs4,ii,x,y);
        draw_sprite(spr_mar_walk_body3,ii,x,y);
    }
    if (trim=0) then draw_sprite(spr_mar_walk_pauldron1,ii,x,y);
    if (trim=1) then draw_sprite(spr_mar_walk_pauldron2,ii,x,y);
}
if (animation="fire"){
    if (col_special=0){
        draw_sprite(spr_mar_walk_legs1,0,x,y);
        draw_sprite(spr_mar_fire_body1,ii,x,y);
    }
    if (col_special=1){
        draw_sprite(spr_mar_walk_legs1,0,x,y);
        draw_sprite(spr_mar_fire_body2,ii,x,y);
    }
    if (col_special=2){
        draw_sprite(spr_mar_walk_legs3,0,x,y);
        draw_sprite(spr_mar_fire_body3,ii,x,y);
    }
    if (col_special=3){
        draw_sprite(spr_mar_walk_legs4,0,x,y);
        draw_sprite(spr_mar_fire_body3,ii,x,y);
    }
    if (trim=0) then draw_sprite(spr_mar_fire_pauldron1,ii,x,y);
    if (trim=1) then draw_sprite(spr_mar_fire_pauldron2,ii,x,y);
}

if (wounded&lt;=0) then shader_reset();
// if (wounded&gt;0) then d3d_set_fog(false,16645629,0,0);
if (wounded&gt;0) then d3d_set_fog(false,255,0,0);

if (wounded&gt;0) then wounded-=1;

/*
draw_set_color(0);
draw_set_font(fnt_small);
draw_set_halign(fa_left);
draw_text(x-150,y-16,"Ammo:"+string(marine_wep1_clip[8])+"("+string(marine_wep1_ammo[8])+"), Reload:"+string(marine_wep1_reload[8]));
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
wounded=choose(0,0,0,0,8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
